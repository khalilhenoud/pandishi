Last updated: Tuesday 1-3-2017, Wednesday 1-4-2017, Thursday 1-5-2017, Sunday 1-8-2017,
Monday 1-9-2017, Tuesday 1-10-2017, Wednesday 1-11-2017, Thursday 1-12-2017.

Dependencies: Winmm.lib; Shlwapi.lib; opengl32.lib; glu32.lib; gdiplus.lib;

Tasks:
- Initial refactoring (MAJOR):
    - gvector.h                                                                         // done
    - geom.h                                                                            // done
    - bbox.h                                                                            // done
    - point.h                                                                           // done
    - sphere.h                                                                          // done
    - plane.h                                                                           // done
    - line.h                                                                            // done
    - segment.h                                                                         // done
    - matrix.h                                                                          // done
    - quaternion.h                                                                      // done
    - input.h, input.cpp                                                                // done
    - frameratecontroller.h, frameratecontroller.cpp                                    // done
    - 3DSLoader.h, 3DSLoader.cpp refactor:
        - mesh.h (containing mesh, textures, materials).                                // done
        - model.h (containing model).                                                   // done
        - Add an interface class for loaders and serializers, create an ASE and         // done
        (optional)binary loader/serializer classes.
        - Remove all fancy graphics features, VBOs and OQ, will be re-added later.      // done
        - Remove font support from the renderer.                                        // done
        - Remove BSP class usage, as it serves no purpose currently.                    // done
        @ Note that we are no longer loading the textures when loading the model.
        @ Hierarchies and multi-sets of UVs and materials are not supported in ASE.
        @ Incorrect calculation of normals, tangents, bi-normals for ASE.
    - WinMain.cpp                                                                       // done
    - application.h                                                                     // done
    - renderer.h, renderer.cpp                                                          // done
    - my_application.cpp                                                                // done
    - Compile and fix all errors in the project.                                        // done
    - Update matrix class to support translation and rotation.                          // done
    - Copy the pipeline class from c-rasterizer, and the camera class.                  // done
    - Update the MyApplication class to make sure the behavior is meaningful, copy from // done
    c-rasterizer.
    - Render a grid.                                                                    // done
    - Set the window title as the frame rate.                                           // done
    - Rethink the pipeline structure and how it should work with the renderer.          // done
	- Clone repositry, under pandishi.													// current
	- Start refactoring.																// current
- Additions and further refactoring:
    - Loaders/Serializers:
        - Create a binary (no longer optional) loader/serializer.
        - Create an ASCII FBX loader/serializer, this will enable importing of
        animation curves for all properties as well as animated skinned objects.
        - Use Autodesk FBX SDK to load any data from fbx (meshes, etc...) into the
        engine.
        - Implement importing hierarchies in the ASE file serializer and fix normals,
        tangents and bi-normals calculations. Check if multiple sets can be supported.
    - Re-factor BSP class for future usage.
    - Support VBOs in OpenGL renderer.
    - Support Bitmap font text rendering.
    - Replace the float variables in the matrices classes by an array.
    - Implement light and camera classes, among others.
    - Fully fledged collision detection system (TO BE DETAILED FURTHER).
    - Skinned objects (TO BE DETAILED FURTHER).
    - Advanced renderer (TO BE DETAILED FURTHER).
    - Editor (TO BE DETAILED FURTHER).
    - Physics engine (TO BE DETAILED FURTHER).
- Remove unneeded source and header files from the project folder and try and run.      // done
- Remove usage of PI and EPSILON macros, as they are redundant; they exist in the       // done
standard library.
    @ After checking PI is needed but EPSILON has been removed.
- Check if you can remove the 'w' component from the vertex or vector class.            // NAD
    @ After checking, it is needed for the interaction with matrices.
- Remove dependencies on GDIPlus, you can use (very famous) C libraries.                // current
- After refactoring is done and the program successfully runs, upload to Github.        // next
- Re-check what can remain public and what needs to be moved to private namespace.
- Research C++ best coding practices, you can check some links in my task document.
- Rewrite your own standard classes (arrays, lists, hash tables, etc...).
- Write your own memory manager.
- Logging functionality to make debugging easier.

Remarks:
- Every parameter of type class not modified by the method should be const.
- A member function that does not modify the class should be const.
- Base types should not know about complex type (i.e. Point3D should not know about class Sphere,
Plane, Line3D should not know about Plane, etc...).
- Only on functions and classes do we put the open brace on a newline.
- Use a constant reference instead of a constant copy (saves the temporary variable).
- Philosophy: we only add classes and re-factor when the need arises, we do not try and predict the
future.
- A CAD program has no knowledge that an asset (for example a mesh or a material) is unique across
the project, and currently there no way to distinguish the asset across the project (to avoid
duplicates), once an asset manager is implemented that problem can be addressed.
- Stick to 'Initialize' and 'Cleanup' as function names for this kind of default functionality.

Scratch:
- A model has a transformation matrix, a translation vector and a scale vector.
- A geometry offset might also need a transformation matrix, translation vector and a scale vector,
this is not to animate it but rather to displace it without having to change the vertex data.
- A model could parent a geometry object, or several geometry objects.
- A model could parent another model, which represent a hierarchy of models (a scene).
- A camera is a model (needs a base class).
- TO BE CONSIDERED: A collision object is just like a geometry object but includes collision data.
- TO BE CONSIDERED: A Model can have modifiers such as skin and morph.
- _MSC_VER check for this to determine if you are compiling under VS or not.

// TO BE REMOVED: Setting up a light source just for testing (to not make the meshes look flat).
/*
float ambientlight[] = {0.1f, 0.1f, 0.1f, 1.f};
float diffuselight[] = {0.2f, 0.2f, 0.2f, 1.f};
float specular[] = {0.1f, 0.1f, 0.1f, 1.f};

glLightfv(GL_LIGHT0, GL_AMBIENT, ambientlight);
glLightfv(GL_LIGHT0, GL_DIFFUSE, diffuselight);
glLightfv(GL_LIGHT0, GL_SPECULAR, specular);
glEnable(GL_LIGHT0);

// Setting the light position.
float lightpos[] = {-50.f, 50.f, 100.f, 1.f};
glLightfv(GL_LIGHT0, GL_POSITION, lightpos);

// TO BE REMOVED: Setting up a spot light source.
float spotlightpos[] = {0.f, 0.f, 150.f, 1.f};
float spotdir[] = {0.f, 0.f, -1.f};

glLightfv(GL_LIGHT1, GL_AMBIENT, ambientlight);
glLightfv(GL_LIGHT1, GL_DIFFUSE, diffuselight);
glLightfv(GL_LIGHT1, GL_SPECULAR, specular);
glLightf(GL_LIGHT1, GL_SPOT_CUTOFF, 30.f);

// Set the spot light position and direction.
glLightfv(GL_LIGHT1, GL_POSITION, spotlightpos);
glLightfv(GL_LIGHT1, GL_SPOT_DIRECTION, spotdir);
glEnable(GL_LIGHT1);
*/

/*
if ((utils::Mouse::IsPressedLButton()) || (utils::Mouse::IsPressedRButton())) {
    if (firsttime) {
        utils::Mouse::GetPosition(x, y);
		firsttime = false;
    } else {
        int sx, sy;
        utils::Mouse::GetPosition(sx, sy);
        dx = sx - x;
        dy = sy - y;
        x = sx;
        y = sy;

        float sdx = (float)dx/10.f;
        float sdy = (float)dy/10.f;

        if (utils::Mouse::IsPressedRButton())
            pipeline->PostTranslate(sdx, -sdy, 0);

        if (utils::Mouse::IsPressedLButton())
            pipeline->PreRotateY(sdx * 2 / 180.0 * PI);
    }
} else if (!utils::Mouse::IsPressedLButton() && !utils::Mouse::IsPressedRButton()) {
    firsttime = true;

    if (utils::Keyboard::IsPressed(VK_UP))
        pipeline->PostTranslate(0, 0, 5);

    if (utils::Keyboard::IsPressed(VK_DOWN))
        pipeline->PostTranslate(0, 0, -5);
}
*/
